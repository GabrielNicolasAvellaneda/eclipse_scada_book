<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" 
	xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
    xml:id="vi">

	<title>Visual Interface</title>
  
    <para>All URIs are relative based on the current resource.</para>
    
    <section xml:id="vi_register">
      <title>Registering a new view instance</title>
      
      <para>
      In order to have a view available in the running client it needs to be registered
      using the Eclipse extension framework.
      </para>
      
      <para>
      In the bundle were the <filename>.vi</filename> file resides add a new entry in the
      <filename>plugin.xml</filename>.
      </para>
      
      <para>
<programlisting language="xml"><![CDATA[...
 <extension
    point="org.eclipse.scada.vi.ui.user.view">
    <viewInstance
      defaultInstance="true"
      name="Logon"
      zooming="false"
      mainView="false"
      resource="resources/views/placeholder.vi"
      factoryClass="org.eclipse.scada.vi.ui.user.VisualInterfaceFactory"
      id="org.eclipse.scada.samples.demo1.client.placeholder">
      <visibility>
        <reference
          definitionId="org.eclipse.scada.samples.demo1.client.nosession">
        </reference>
        </visibility>
    </viewInstance>
 </extension>
...]]></programlisting>
    </para>
    
  <para>
  The attribute <varname>resource</varname> points to the file that defines the view.
  The attribute <varname>factoryClass</varname> defines the class that will implement
  the view. If this is a default <filename>.vi</filename> file, the value must be
  <classname>org.eclipse.scada.vi.ui.user.VisualInterfaceFactory</classname>.
  </para>
  
  <para>
  The attribute <varname>id</varname> must be unique in the while application.
  </para>
      
    </section>
    
    <section>
      <title>Create a new visual interface file</title>
      
      <para>
      Inside the Eclipse IDE create a new file <menuchoice><guimenu>File</guimenu><guisubmenu>New </guisubmenu><guimenuitem>Otherâ€¦</guimenuitem></menuchoice>. 
      </para>
      
      <para>
      Choose <guilabel>VisualInterface Model</guilabel> from the list.
      </para>
      
      <para>Register the file as described in <xref linkend="vi_register"/></para>
    </section>
    
    <section>
      <title>Styles</title>
      
      <section xml:id="vi_linesize">
        <title>Line size</title>
        
        <para>
        When a line size of 1 is used and the view is allowed to zoom, also
        the line size will be zoomed. In most cases this is not intended if
        you have a line that is one pixel wide. In this case you most likely
        want to have a line that always stays the smallest size possible (one pixel).
        </para>
        <para>
        This is also known as a <quote>hairline</quote> and  
        can be achieved by setting line size of <constant>0.0</constant>.
        Lines of size <constant>0</constant> (invisible lines) can be achieved by using a
        negative amount (e.g. "-1") as line size.
        </para> 
      </section>
      
      <section xml:id="vi_style_color">
      <title>Colors</title>
      <para>
      In VI are represented as RGB colors in the hex notation. As known from HTML. But other than
      HTML, VI requires the color information to be always 6 characters long. The case is not significant.
      </para>
    
      <informaltable>
      <tr><th>Valid examples</th><th>Invalid examples</th></tr>
      <tr><td>
        <para><code>#FF0000</code></para>
        <para><code>#00ff00</code></para>
        <para><code>#0000fF</code></para>
      </td><td>
        <para><code>red</code> (names are not allowed)</para>
        <para><code>#f00</code> (short form is not allowed, must have 6 character plus #)</para>
        <para><code>FF0000</code> (missing #)</para>
       </td></tr>
      </informaltable>
      
      </section>
      
      <xi:include href="borders.xml"/>
      
    </section>
    
    <xi:include href="scripting.xml"/>
    <xi:include href="editing.xml"/>
    <xi:include href="model.xml"/>
    
</section>
