<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 Get the documentation from Eclipse SCADA 
     ====================================================================== -->
<project name="project" default="default">
	<description>
    	Get the documentation from Eclipse SCADA
    </description>

	<property name="clone.dir" location="../clone" />
	<property name="git.exec" value="git" />

	<property name="generated.dir" location="generated" />

	<!-- ================================= 
          target: default              
         ================================= -->
	<target name="default" depends="clean, clone, generate">
	</target>

	<!-- ================================= 
          target: clean
         ================================= -->
	<target name="clean">
		<delete dir="${clone.dir}" />
		<delete dir="${generated.dir}" />
	</target>

	<macrodef name="cloneRepo">
		<attribute name="repo" />
		<attribute name="branch" />
		<sequential>
			<echo message="Cloning git://git.eclipse.org/gitroot/@{repo}" level="info" />
			<exec executable="${git.exec}" dir="${clone.dir}">
				<arg value="clone" />
				<arg value="git://git.eclipse.org/gitroot/@{repo}" />
				<arg value="-b" />
				<arg value="@{branch}" />
			</exec>
		</sequential>
	</macrodef>

	<!-- ================================= 
          target: clone
         ================================= -->
	<target name="clone">
		<mkdir dir="${clone.dir}" />

		<cloneRepo repo="eclipsescada/org.eclipse.scada.utils" branch="master" />
	</target>

	<!-- ================================= 
          target: generate              
         ================================= -->
	<target name="generate">
		<mkdir dir="${clone.dir}" />
		<mkdir dir="${generated.dir}" />
		<copy todir="${generated.dir}">
			<fileset dir="${clone.dir}">
				<include name="*/*/docbook/**" />
			</fileset>
		</copy>

		<script language="javascript">
			<![CDATA[
importClass(java.io.File);
importClass(java.io.PrintStream);
dir = project.getProperty ( "generated.dir" );

fs = project.createDataType("fileset");
fs.setDir( new File(dir) );
fs.setIncludes("*/*/docbook/index.xml");

ds = fs.getDirectoryScanner(project);
srcFiles = ds.getIncludedFiles();

ps = new PrintStream ( dir + "/bundles.xml" );
ps.println ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" );
ps.println ( "<chapter xmlns=\"http://docbook.org/ns/docbook\" xmlns:xi=\"http://www.w3.org/2001/XInclude\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd\" version=\"5.0\">");
ps.println ( "<title>Bundle specific documentation</title>" );
ps.println ( "<para>The following sections contain bundle specific documentation.</para>" );
try {
	srcFiles.forEach ( function ( entry ) {
		var file = new File ( dir + "/" + entry );
		println ( file.getParentFile().getParentFile().getName() + " - " + file );
		ps.println ( "<xi:include href=\"" + file.getAbsolutePath() + "\" />" );
	});
}
catch(err)
  {
  }
ps.println ( "</chapter>" );
ps.close ();
		]]>
		</script>

	</target>

</project>
